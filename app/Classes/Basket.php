<?php

namespace App\Classes;

use App\Models\Order;
use App\Models\Sku;
use App\Models\Coupon;
use App\Mail\OrderCreated;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Session;
use App\Services\sConversion;

class Basket
{
    protected $order;

    public function __construct($createOrder = false)
    {
        $order = session('order');

        if (is_null($order) && $createOrder)
        {
            $data = [];

            if (Auth::check())
            {
                $data['user_id'] = Auth::id();
            }

            $data['currency_id'] = 1;

            $this->order = new Order($data);

            session(['order' => $this->order]);

            // üëá –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–æ—Ä–∑–∏–Ω—ã
            // $this->addPackageSku();
        }
        else
        {
            $this->order = $order;
        }

    }

    public function getOrder()
    {
        return $this->order;
    }

    public function countAvailable($updateCount = false)
    {
        $skus = collect([]);
        foreach ($this->order->skus as $orderSku)
        {
            $sku = Sku::find($orderSku->id);
            if ($orderSku->countInOrder > $sku->count)
            {
                return false;
            }
            if($updateCount)
            {
                $sku->count -= $orderSku->countInOrder;
                $skus->push($sku);
            }
        }
        if($updateCount)
        {
            $skus->map->save();
        }
        return true;
    }

    public function saveOrder($name, $phone, $email, $deliveryType, $delivery_city = null, $delivery_street = null, $delivery_home = null, $note = null)
    {
        if (!$this->countAvailable(true)) return false;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç Order
        $order = $this->order; // —Ç–µ–∫—É—â–∏–π Order –≤ Basket
        $skus = $order->skus;  // –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã

        $order->name = $name;
        $order->phone = $phone;
        $order->email = $email;
        $order->delivery_type = $deliveryType;
        $order->delivery_city = $delivery_city;
        $order->delivery_street = $delivery_street;
        $order->delivery_home = $delivery_home;
        $order->status = 1;
        $order->note = $note;
        $order->sum = max(0, $order->getFullSum());
        if ($order->delivery_type === 'delivery' && $order->sum < 10000) {
            $order->sum += 500;
        }

        $order->save(); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ (—Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å $order->id)

        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ pivot
        foreach ($skus as $sku) {
            $order->skus()->attach($sku->id, [
                'count' => $sku->countInOrder,
                'price' => $sku->price,
            ]);
        }

        session()->forget('order');

        return $order; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞
    }



    public function removeSku(Sku $sku, $quantity = null)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è —É –ø—Ä–æ–¥—É–∫—Ç–∞
        $unit = $sku->product->unit;

        $quantity = $quantity ?? ($unit === 'kg' ? 0.1 : 1);

        if ($this->order->skus->contains($sku)) {
            $pivotRow = $this->order->skus->where('id', $sku->id)->first();

            $pivotRow->countInOrder -= $quantity;
            if ($pivotRow->countInOrder <= 0) {
                $this->order->skus = $this->order->skus->filter(fn($s) => $s->id !== $sku->id);
            }
        }
    }



        public function addSku(Sku $sku, $quantity = null)
    {
        $unit = $sku->product->unit; // –±–µ—Ä—ë–º unit —É –ø—Ä–æ–¥—É–∫—Ç–∞
        $quantity = $quantity ?? ($unit === 'kg' ? 0.5 : 1); // default 0.5kg –∏–ª–∏ 1—à—Ç

        if ($this->order->skus->contains($sku))
        {
            $pivotRow = $this->order->skus->where('id', $sku->id)->first();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π count –¥–ª—è —à—Ç
            if ($unit === 'pcs' && $pivotRow->countInOrder + $quantity > $sku->count)
            {
                return false;
            }

            $pivotRow->countInOrder += $quantity;
        }
        else
        {
            if ($unit === 'pcs' && $quantity > $sku->count)
            {
                return false;
            }

            $sku->countInOrder = $quantity;
            $sku->unit = $unit; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–¥–∏–Ω–∏—Ü—É –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
            $this->order->skus->push($sku);
        }
    }

    public function setCoupon(Coupon $coupon)
    {
        $this->order->coupon()->associate($coupon);
    }

    public function clearCoupon()
    {
        $this->order->coupon()->dissociate();
    }

    public function setUserId($userId)
    {
        $this->order->user_id = $userId;
    }

    protected function addPackageSku()
    {
        // ID –ø–∞–∫–µ—Ç–∞ –ª—É—á—à–µ –≤—ã–Ω–µ—Å—Ç–∏ –≤ .env –∏–ª–∏ config
        $packageSkuId = config('app.package_sku_id');

        $sku = Sku::find($packageSkuId);

        if ($sku)
        {
            $this->addSku($sku, 1); // –¥–æ–±–∞–≤–ª—è–µ–º 1 –ø–∞–∫–µ—Ç
        }
    }

}
